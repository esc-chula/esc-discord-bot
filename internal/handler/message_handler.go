package handler

import (
	"fmt"
	"log"
	"regexp"
	"strings"

	"github.com/bwmarrin/discordgo"
	"github.com/esc-chula/esc-discord-bot/config"
	"github.com/esc-chula/esc-discord-bot/internal/instance"
)

type messageHandler struct {
}

func NewMessageHandler() *messageHandler {
	return &messageHandler{}
}

func (h *messageHandler) MessageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	var err error

	cfg := config.GetConfig()

	if m.Author.ID == s.State.User.ID || m.GuildID != "" {
		return
	}

	log.Printf("Message from %v: %v", m.Author.ID, m.Content)

	usersData := instance.GetUsersInstance()

	var userData map[string]interface{}

	for _, user := range usersData {
		if user["Discord ID"] == m.Author.ID {
			userData = user
			break
		}
		if user["Student Id"] == m.Content {
			userData = user
			break
		}
	}

	if userData == nil {
		_, err = s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå  **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Contact List ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (%v)\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢ TECH ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", cfg.Discord.ContactListForm))
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}
		return
	}

	if len(m.Content) == 10 && userData["Bot Status"] == "unconfirmed" {
		studentId := m.Content

		validStudentId, _ := regexp.MatchString(`^6\d{7}21$`, studentId)
		if !validStudentId {
			_, err = s.ChannelMessageSend(m.ChannelID, "‚ùå  ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
			if err != nil {
				log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
				return
			}
		}

		_, err = s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ \n\nüë§ **%v** \n\n‚úÖ  ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` \n‚ùå  ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå `cancel`", userData["Full Name"]))
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}

		instance.SetUserDataByStudentId(studentId, "Bot Status", "confirming")
		instance.SetUserDataByStudentId(studentId, "Discord ID", m.Author.ID)

		return
	}

	if m.Content == "confirm" && userData["Discord ID"] == m.Author.ID && userData["Bot Status"] == "confirming" {
		instance.SetUserDataByDiscordId(m.Author.ID, "Bot Status", "confirmed")

		_, err = s.ChannelMessageSend(m.ChannelID, "üí≠  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Role ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}

		departmentRoles := cfg.Discord.DepartmentRoles[userData["Department"].(string)]
		yearRole := cfg.Discord.YearRoles[userData["Year"].(string)]

		roles := append(departmentRoles, yearRole)

		for _, role := range roles {
			err = s.GuildMemberRoleAdd(cfg.Discord.ServerId, m.Author.ID, role)
			if err != nil {
				log.Printf("User: %v, Error adding role: %v", m.Author.ID, err)
				return
			}
		}

		rolesName := []string{}
		for _, role := range roles {
			serverRole, err := s.State.Role(cfg.Discord.ServerId, role)
			if err != nil {
				continue
			}
			rolesName = append(rolesName, serverRole.Name)
		}

		_, err = s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ  ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Role: `%v`\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î %v ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!\n‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ù‡πà‡∏≤‡∏¢ TECH ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏±‡∏ö", strings.Join(rolesName, "`, `"), cfg.Discord.ServerName))
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}

		// TODO: patch usersData to NocoDB

		return
	}

	if m.Content == "cancel" && userData["Discord ID"] == m.Author.ID && userData["Bot Status"] == "confirming" {
		instance.SetUserDataByDiscordId(m.Author.ID, "Bot Status", "unconfirmed")
		instance.SetUserDataByDiscordId(m.Author.ID, "Discord ID", nil)

		_, err = s.ChannelMessageSend(m.ChannelID, "‚ùå  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Role")
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}

		return
	}

	if userData["Bot Status"] == "confirming" {
		_, err = s.ChannelMessageSend(m.ChannelID, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` ‡∏´‡∏£‡∏∑‡∏≠ `cancel` ‡πÄ‡∏û‡∏¥‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
		if err != nil {
			log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
			return
		}
		return
	}

	if userData["Bot Status"] == "confirmed" {
		return
	}

	_, err = s.ChannelMessageSend(m.ChannelID, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Role")
	if err != nil {
		log.Printf("User: %v, Error sending message: %v", m.Author.ID, err)
		return
	}
}
